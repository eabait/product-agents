// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Prompt builders creates clarification prompt snapshot 1`] = `
"You evaluate whether the following product request has enough detail to generate a meaningful PRD.

Request: "Build a PRD for a mobile app but I only have a rough idea so far."

Determine if clarification is required:
- Minimum viable information covers the product concept, primary user type, and essential functionality.
- Prefer making reasonable industry assumptions over asking obvious follow-up questions (e.g., payments for e-commerce, task tracking for project tools).

Questioning strategy:
- Ask only critical questions when a core concept, users, or primary functionality is missing.
- Optional clarifications should be limited to high-impact business context, constraints, or success criteria.

Confidence guidelines (0-100):
- 80-100 → proceed without clarification.
- 60-79 → proceed but include up to two critical questions.
- 40-59 → ask targeted questions that resolve fundamental gaps.
- 0-39 → request clarification before drafting the PRD.

Return JSON with keys:
- needsClarification (boolean)
- confidence (number 0-100)
- missingCritical (array of strings describing missing essentials)
- questions (array of critical questions only)

Output rules:
- Return strict JSON only. No prose, explanations, or code fences."
`;

exports[`Prompt builders creates constraints prompt snapshot 1`] = `
"You are a product manager refining the Constraints section of a PRD. Apply minimal edits while preserving strong existing content.

## User Input
Add real-time analytics for enterprise customers and update the launch strategy.
## Analysis Summary
- Themes: - Analytics enablement; - Enterprise readiness
- Functional requirements: - Stream KPIs in real time; - Provide historical comparisons
- Technical requirements: - Integrate with Snowflake warehouse
- UX requirements: - Accessible dashboards meeting WCAG 2.1 AA
- Constraints: - Must comply with SOC 2 Type II

## Existing Constraints
- Dependent on data warehouse refresh time under five minutes

## Existing Assumptions
- Data engineering team maintains ingestion pipeline health

## Current Constraints
- Must comply with SOC 2 Type II

## Current Assumptions
- Data warehouse maintains <5 minute latency

## Instructions
- Produce 2-6 constraints (non-negotiable limits) and 2-5 assumptions (items to validate).
- Keep statements specific, actionable, and ≤ 200 characters.
- When modifying or removing existing items, reference them directly.
- Incorporate insights from the analysis summary and provided context.

## Output JSON
- mode: "smart_merge" | "append" | "replace"
- constraints.operations: array of { action, reference, value?, rationale? } for targeted edits
- constraints.proposed: array of fully written constraints to add when appending
- assumptions.operations: same structure as constraints.operations
- assumptions.proposed: array of fully written assumptions for append actions
- summary: optional string explaining notable decisions

## Output Rules
- Return strict JSON only. No prose or commentary.
- Do not wrap the JSON in code fences or additional text."
`;

exports[`Prompt builders creates context analysis prompt snapshot 1`] = `
"You analyze the product request and extract planning signals for a PRD.

## User Input
We need live analytics for enterprise clients.

## Provided Context
- Constraint: Compliance — Must retain data for 24 months to satisfy enterprise audit needs.
- Requirement: Scalability — Handle 5k concurrent viewers without latency spikes.

## Tasks
- Themes: identify the main product goals or focus areas (string array).
- Requirements: capture functional, technical, and UX requirements as arrays of concise statements.
- Epic stories: include 3-8 epic level user stories (title + description) when possible.
- MVP features: list essential launch capabilities.
- Constraints: highlight technical, business, or compliance limitations.

## Output JSON Shape
- themes: string[]
- requirements: { functional: string[]; technical: string[]; user_experience: string[]; epics?: { title: string; description: string }[]; mvpFeatures?: string[] }
- constraints: string[]

## Output Rules
- Use empty arrays when information is unavailable.
- Keep entries concise (≤ 200 characters).
- Return strict JSON only with the keys above. No additional commentary or code fences."
`;

exports[`Prompt builders creates key features prompt snapshot 1`] = `
"You are a product manager updating the Key Features section of a PRD. Honor strong existing items and make the smallest necessary changes.

## User Input
Add real-time analytics for enterprise customers and update the launch strategy.
## Analysis Summary
- Themes: - Analytics enablement; - Enterprise readiness
- Functional requirements: - Stream KPIs in real time; - Provide historical comparisons
- Technical requirements: - Integrate with Snowflake warehouse
- UX requirements: - Accessible dashboards meeting WCAG 2.1 AA
- Epic stories: Real-time dashboards: Operations leaders view live performance trends.
- MVP features: - Live KPI dashboard; - Alert subscription management
- Constraints: - Must comply with SOC 2 Type II

## Existing Key Features
- Automated scheduled reports delivered via email
- Role-based dashboards for executives and managers

## Current Feature Set
- Automated anomaly detection alerts

## Instructions
- Produce 3-7 user-facing features. Each feature should include a short title and a value-focused description.
- Prioritize items that address the identified requirements, epics, and MVP scope.
- Keep language stakeholder-friendly (≤ 220 characters per feature).
- Prefer targeted updates or additions over full rewrites.

## Output JSON
- mode: "smart_merge" | "append" | "replace"
- operations: array of { action, referenceFeature?, feature?, rationale? } to describe updates/removals
- proposedFeatures: array of fully written features to append when adding new items
- summary: optional string explaining notable changes

## Output Rules
- Return strict JSON only. No prose or commentary.
- Do not wrap the JSON in code fences or additional text."
`;

exports[`Prompt builders creates section detection prompt snapshot 1`] = `
"You review an edit request and decide which PRD sections require updates.

## Available Sections
{
  "targetUsers": "Who the product is for",
  "solution": "What we are building and how",
  "keyFeatures": "Core functionality and differentiators",
  "successMetrics": "How success is measured",
  "constraints": "Technical, business, or regulatory limits"
}

## User Request
Tighten our constraints for compliance and add engagement metrics.

## Existing PRD Snapshot
- Target users:
- Operations managers at mid-market retail companies needing live visibility
- Solution overview: We currently provide scheduled analytics reports summarizing daily performance.
- Key features:
- Automated scheduled reports delivered via email
- Role-based dashboards for executives and managers
- Success metrics:
  • Weekly Active Analysts (60% of analysts log in weekly)
- Constraints:
- Dependent on data warehouse refresh time under five minutes

## Decision Process
- Select only the sections that must change to satisfy the request.
- If the request does not materially impact a section, leave it out.
- Typical mapping:
  • New or modified features → keyFeatures
  • Changes to audience/personas → targetUsers
  • Core solution changes or delivery approach → solution
  • Measurement or KPI updates → successMetrics
  • New limitations, dependencies, or compliance needs → constraints

## Output JSON Shape
- affectedSections: string[] containing section keys from the table above
- reasoning: object where each key is a section and the value explains why it changes
- confidence: "high" | "medium" | "low"

## Output Rules
- Be conservative: exclude sections unless there is a clear change driver.
- Return strict JSON only. No prose, explanations, or code fences."
`;

exports[`Prompt builders creates solution prompt snapshot 1`] = `
"You are a product manager drafting the Solution Overview section of a PRD. Provide clear direction while staying high level.

## User Input
Add real-time analytics for enterprise customers and update the launch strategy.
## Analysis Summary
- Themes: - Analytics enablement; - Enterprise readiness
- Functional requirements: - Stream KPIs in real time; - Provide historical comparisons
- Technical requirements: - Integrate with Snowflake warehouse
- UX requirements: - Accessible dashboards meeting WCAG 2.1 AA
- Constraints: - Must comply with SOC 2 Type II

## Existing Solution Snapshot
- Overview: We currently provide scheduled analytics reports summarizing daily performance.
- Approach: Deliver enhancements in three phases aligned to quarterly releases.

## Instructions
- Solution overview: describe WHAT is being built in 2 concise paragraphs or fewer.
- Approach: outline HOW the team will execute (architecture, phases, or methodology) in 1 paragraph.
- Address the identified requirements and constraints while keeping stakeholder-friendly language.
- Avoid low-level implementation details or open questions.

## Output JSON
- solutionOverview: string (120-600 characters, stakeholder friendly)
- approach: string (90-400 characters describing execution strategy)

## Output Rules
- Return strict JSON only. No prose or commentary.
- Do not wrap the JSON in code fences or additional text."
`;

exports[`Prompt builders creates success metrics prompt snapshot 1`] = `
"You are a product manager updating the Success Metrics section of a PRD. Respect strong existing metrics and apply only necessary changes.

## User Input
Add real-time analytics for enterprise customers and update the launch strategy.
## Analysis Summary
- Themes: - Analytics enablement; - Enterprise readiness
- Functional requirements: - Stream KPIs in real time; - Provide historical comparisons
- Technical requirements: - Integrate with Snowflake warehouse
- UX requirements: - Accessible dashboards meeting WCAG 2.1 AA
- Constraints: - Must comply with SOC 2 Type II

## Existing Success Metrics
- Weekly Active Analysts — Target: 60% of analysts log in weekly (Within two quarters of launch)

## Current Metrics to Preserve
- Dashboard adoption — Target: 75% of eligible users log in weekly (90 days post-launch)

## Instructions
- Provide 2-4 outcome metrics that signal whether the product meets its goals.
- Each metric must include a measurable target and a realistic timeline.
- Balance user value and business impact; avoid vague activity metrics.
- Reference existing metrics when updating or removing items.

## Output JSON
- mode: "smart_merge" | "append" | "replace"
- operations: array of { action, referenceMetric?, metric?, target?, timeline?, rationale? }
- proposedMetrics: array of { metric, target, timeline } for new additions
- summary: optional string describing notable adjustments

## Output Rules
- Return strict JSON only. No prose or commentary.
- Do not wrap the JSON in code fences or additional text."
`;

exports[`Prompt builders creates target users prompt snapshot 1`] = `
"You are a product manager updating the Target Users section of a PRD. Preserve strong personas and apply only necessary edits.

## User Input
Add real-time analytics for enterprise customers and update the launch strategy.
## Analysis Summary
- Themes: - Analytics enablement; - Enterprise readiness
- Functional requirements: - Stream KPIs in real time; - Provide historical comparisons
- Technical requirements: - Integrate with Snowflake warehouse
- UX requirements: - Accessible dashboards meeting WCAG 2.1 AA
- Constraints: - Must comply with SOC 2 Type II

## Existing Target Users
- Operations managers at mid-market retail companies needing live visibility

## Current Personas to Respect
- Regional operations managers overseeing daily retail performance

## Instructions
- Produce 2-4 personas. Each persona should be 1-2 sentences describing who they are and their primary need.
- Focus on specific user segments that align with the themes and requirements.
- Avoid generic labels (e.g., "end users"); highlight context such as role, company size, or pain point.
- Reference existing personas when updating or removing them.

## Output JSON
- mode: "smart_merge" | "append" | "replace"
- operations: array of { action, referenceUser?, user?, rationale? } describing targeted edits
- proposedUsers: array of fully written personas to append
- summary: optional string explaining key decisions

## Output Rules
- Return strict JSON only. No prose or commentary.
- Do not wrap the JSON in code fences or additional text."
`;
